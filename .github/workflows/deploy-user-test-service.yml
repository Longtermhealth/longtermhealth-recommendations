name: Deploy User Test Service

on:
  push:
    branches:
      - development
      - main
    paths:
      - 'user-test-service/**'
      - '.github/workflows/deploy-user-test-service.yml'
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: lthrecommendation
  CONTAINER_REGISTRY: lthrecommendations.azurecr.io
  IMAGE_NAME: lthusertest
  RESOURCE_GROUP: rg-sponsorship

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Log in to Azure Container Registry
      run: |
        az acr login --name lthrecommendations
    
    - name: Build and push Docker image
      run: |
        cd user-test-service
        docker build -t ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker push ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Also tag as latest for development branch
        if [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
          docker tag ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        fi
    
    - name: Configure App Settings
      run: |
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --slot usertest-dev \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --settings \
            CLICKUP_API_KEY="${{ secrets.USER_TEST_CLICKUP_API_KEY }}" \
            CLICKUP_LIST_ID="${{ secrets.USER_TEST_CLICKUP_LIST_ID }}" \
            KEY_FEEDBACK_FIELD_ID="${{ secrets.USER_TEST_KEY_FEEDBACK_FIELD_ID }}" \
            EMAIL_FIELD_ID="${{ secrets.USER_TEST_EMAIL_FIELD_ID }}" \
            TYPEFORM_API_TOKEN="${{ secrets.USER_TEST_TYPEFORM_API_TOKEN }}" \
            WEBSITES_PORT="5001" \
            PORT="5001"
    
    - name: Configure Container Registry Access
      run: |
        # Ensure managed identity is assigned
        IDENTITY=$(az webapp identity show \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --slot usertest-dev \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query principalId -o tsv || echo "")
        
        if [ -z "$IDENTITY" ]; then
          echo "Assigning managed identity..."
          IDENTITY=$(az webapp identity assign \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --slot usertest-dev \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query principalId -o tsv)
        fi
        
        echo "Managed Identity: $IDENTITY"
        
        # Grant ACR pull permission
        ACR_ID=$(az acr show --name lthrecommendations --query id -o tsv)
        az role assignment create \
          --assignee $IDENTITY \
          --scope $ACR_ID \
          --role "AcrPull" 2>/dev/null || echo "Role already assigned"
    
    - name: Deploy container to Azure Web App
      run: |
        # Get ACR credentials
        ACR_USERNAME=$(az acr credential show --name lthrecommendations --query username -o tsv)
        ACR_PASSWORD=$(az acr credential show --name lthrecommendations --query "passwords[0].value" -o tsv)
        
        # Configure container with credentials
        az webapp config container set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --slot usertest-dev \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --docker-custom-image-name ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --docker-registry-server-url https://${{ env.CONTAINER_REGISTRY }} \
          --docker-registry-server-user $ACR_USERNAME \
          --docker-registry-server-password "$ACR_PASSWORD"
    
    - name: Restart and verify deployment
      run: |
        az webapp restart \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --slot usertest-dev \
          --resource-group ${{ env.RESOURCE_GROUP }}
        
        echo "‚úÖ Deployment complete!"
        echo "üê≥ Docker image: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "üåê Service URL: https://lthrecommendation-usertest-dev.azurewebsites.net"
        echo "üìù Typeform Webhook URL: https://lthrecommendation-usertest-dev.azurewebsites.net/survey"
        echo ""
        echo "‚è≥ Waiting for service to start (30 seconds)..."
        sleep 30
        
        echo "üîç Checking service health..."
        HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://lthrecommendation-usertest-dev.azurewebsites.net/health || echo "000")
        
        if [ "$HEALTH_STATUS" = "200" ]; then
          echo "‚úÖ Service is healthy!"
        else
          echo "‚ö†Ô∏è Service returned status: $HEALTH_STATUS"
          echo "üìã Check logs with: az webapp log tail --name ${{ env.AZURE_WEBAPP_NAME }} --slot usertest-dev --resource-group ${{ env.RESOURCE_GROUP }}"
        fi